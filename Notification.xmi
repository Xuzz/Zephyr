#import "Common.h"
#import "Notification.h"
#import "Preferences.h"
#import "Keyboard.h"
#import "NSTimer+Blocks.h"

#import "SwitchApp.h"

#include <dlfcn.h>

%group Notification

@interface SBBulletinListController (Zephyr)
- (BOOL)shouldActivate;
- (void)cleanupViews;
- (void)prepareAtLocation:(CGFloat)location;
@end

%hook SBBulletinListController

static UIView *appView = nil;
static UIView *wrapperView = nil;
static SBBulletinListView *centerView = nil;
static UIImageView *shadowView = nil;
static CGFloat grabLocation = NAN;

%new(c@:)
- (BOOL)shouldActivate {
    BOOL preference = [PreferencesGet(@"NotificationEnabled", [NSNumber numberWithBool:YES]) boolValue];
    BOOL ipad = [[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad;

    return preference && !ipad;
}

%new(v@:)
- (void)cleanupViews {
    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (app != nil) {
        [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:0.0f];
        [app disableContextHostingForRequester:(CFStringRef) @"SwitchApp"];
    }

    [appView release];
    [appView removeFromSuperview];
    appView = nil;

    centerView = nil;

    [shadowView release];
    [shadowView removeFromSuperview];
    shadowView = nil;

    [wrapperView release];
    [wrapperView removeFromSuperview];
    wrapperView = nil;
}

- (void)_cleanupAfterShowListView {
    if (![self shouldActivate]) return %orig;

    %orig;
    grabLocation = NAN;
    [self cleanupViews];
}

- (void)_cleanupAfterHideListView {
    if (![self shouldActivate]) return %orig;

    %orig;
    grabLocation = NAN;
    [self cleanupViews];
}

- (void)prepareToShowListViewAnimated:(BOOL)showListViewAnimated aboveBanner:(BOOL)banner {
    if (![self shouldActivate]) return %orig;

    %orig;
    [self prepareAtLocation:0.0f];
}

- (void)prepareToHideListViewAnimated:(BOOL)animated {
    if (![self shouldActivate]) return %orig;

    %orig;

    if (!isnan(grabLocation)) {
        [self prepareAtLocation:grabLocation];
    } else {
        [self prepareAtLocation:ZephyrHeightForOrientation(ZephyrCurrentInterfaceOrientation())];
    }
}

%new(v@:f)
- (void)prepareAtLocation:(CGFloat)location {
    [self cleanupViews];
    grabLocation = location;

    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (app != nil) {
        [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:1.0f];

        UIView *gestureView = [[objc_getClass("SBGestureViewVendor") sharedInstance] viewForApp:app gestureType:kSBGestureTypeSwitchApp includeStatusBar:YES];

        CGRect gestureFrame = [gestureView frame];
        gestureFrame.origin = CGPointZero;

        appView = [[UIView alloc] initWithFrame:gestureFrame];
        [appView addSubview:gestureView];
    } else {
        // XXX: using contentView here isn't necessarily the best option, but it works.
        appView = ZephyrViewWithScreenshotOfView([[objc_getClass("SBUIController") sharedInstance] contentView]);
        [appView retain];

        // Call private UIKit API to cancel touches on the icon lists while swiping.
        // This fixes the bug where swiping up on an icon would start editing mode.
        if ([SBApp respondsToSelector:@selector(_cancelAllTouches)])
            [SBApp performSelector:@selector(_cancelAllTouches)];
    }

    if (ZephyrCurrentInterfaceOrientation() != ZephyrHomeInterfaceOrientation()) {
        ZephyrRotateViewFromOrientationToOrientation(appView, ZephyrHomeInterfaceOrientation(), ZephyrOrientationFlip(ZephyrCurrentInterfaceOrientation()), YES);
    }

    shadowView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"SwitcherShadowTop.png"]];
    CGRect shadowFrame = [shadowView frame];
    shadowFrame.size.height = [[shadowView image] size].height;
    shadowFrame.size.width = [appView bounds].size.width;
    shadowFrame.origin.y = location - shadowFrame.size.height;
    [shadowView setFrame:shadowFrame];
    [shadowView setTransform:CGAffineTransformMakeScale(1, -1)];

    wrapperView = [[UIView alloc] initWithFrame:[appView bounds]];
    CGRect wrapperFrame = [wrapperView frame];
    wrapperFrame.origin.y = location;
    [wrapperView setFrame:wrapperFrame];
    [wrapperView setClipsToBounds:NO];
    [wrapperView addSubview:appView];

    centerView = [self listView];
    [centerView positionSlidingViewAtY:ZephyrHeightForOrientation(ZephyrCurrentInterfaceOrientation())];

    [centerView addSubview:wrapperView];
    [centerView addSubview:shadowView];
}

- (void)positionListViewAtY:(CGFloat)location {
    if (![self shouldActivate]) return %orig;

    grabLocation = location;

    if (location < 0) location = 0;

    CGRect wrapperFrame = [wrapperView frame];
    wrapperFrame.origin.y = location;
    [wrapperView setFrame:wrapperFrame];

    CGRect shadowFrame = [shadowView frame];
    shadowFrame.origin.y = wrapperFrame.origin.y - shadowFrame.size.height;
    [shadowView setFrame:shadowFrame];
}

%end

%hook SBBulletinListView

// we fake the location in order to show the notification UI
// while we are sliding down, so re-fake back the current Y
- (CGFloat)currentY {
    if (!isnan(grabLocation)) {
        return grabLocation;
    } else {
        return %orig;
    }
}

%end

%end

%ctor {
    %init(Notification);
}

