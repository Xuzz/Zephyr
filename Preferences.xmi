/*
 * Copyright (c) 2011-2013, Xuzz Productions, LLC
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#import "Preferences.h"
#import "iPhonePrivate.h"

#define kZephyrPreferencesFileName [NSString stringWithFormat:@"/var/mobile/Library/Preferences/%@.plist", kZephyrPreferencesBundleIdentifier]
static NSDictionary *preferences = nil;
static NSMutableSet *applyActions = nil;

static void ZephyrPreferencesApply() {
    for (ZephyrPreferencesApplyAction action in applyActions) {
        action();
    }
}

void ZephyrPreferencesApplyActionRegister(ZephyrPreferencesApplyAction block) {
    [applyActions addObject:[block copy]];
}

static void ZephyrPreferencesLoad() {
    [preferences release];
    preferences = [[NSDictionary dictionaryWithContentsOfFile:kZephyrPreferencesFileName] retain];
}

id ZephyrPreferencesGet(NSString *key, id defaultValue) {
    id value = [preferences objectForKey:key];
    if (value == nil) value = defaultValue;
    return value;
}

void ZephyrPreferencesSet(NSString *key, id value) {
    NSMutableDictionary *mutablePreferences = [preferences mutableCopy];
    [mutablePreferences setObject:value forKey:key];
    [mutablePreferences writeToFile:kZephyrPreferencesFileName atomically:NO];
    [mutablePreferences release];

    ZephyrPreferencesLoad();
    ZephyrPreferencesApply();
}

NSDictionary *ZephyrPreferences() {
    return [[preferences copy] autorelease];
}

static void ZephyrPreferencesChangedCallback(CFNotificationCenterRef center, void *observer, CFStringRef name, const void *object, CFDictionaryRef userInfo) {
    ZephyrPreferencesLoad();
    ZephyrPreferencesApply();
}

%ctor {
    applyActions = [[NSMutableSet alloc] init];

    ZephyrPreferencesLoad();

    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), NULL, ZephyrPreferencesChangedCallback, (CFStringRef) [NSString stringWithFormat:@"%@.preferences-changed", kZephyrPreferencesBundleIdentifier], NULL, CFNotificationSuspensionBehaviorCoalesce);
}


