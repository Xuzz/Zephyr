/*
 * Copyright (c) 2011-2013, Xuzz Productions, LLC
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#import "Common.h"
#import "Grabber.h"

static CGFloat kGrabberControllerHideTemporalOffset = 2.0f;
static CGFloat kGrabberControllerAnimationDuration = 0.3f;

static NSNumber *SBOffscreenEdgeKey(SBOffscreenEdge edge) {
    return [NSNumber numberWithInt:edge];
}

@implementation ZephyrGrabberController

+ (id)sharedInstance {
    static ZephyrGrabberController *controller = nil;

    if (controller == nil) {
        controller = [[ZephyrGrabberController alloc] init];
    }

    return controller;
}

- (id)init {
    if ((self = [super init])) {
        _grabberViews = [[NSMutableDictionary alloc] init];
    }

    return self;
}

- (void)dealloc {
    [_grabberViews release];

    [super dealloc];
}

- (void)transformGrabberView:(SBBulletinListTabView *)grabberView offscreen:(BOOL)offscreen atEdge:(SBOffscreenEdge)edge {
    CGAffineTransform transform = CGAffineTransformIdentity;
    CGPoint anchorPoint = CGPointMake(0.5, 0.5);

    if (offscreen) {
        CGSize size = [grabberView bounds].size;

        if (edge == kSBOffscreenEdgeTop) {
            transform = CGAffineTransformTranslate(transform, 0, -size.height);
        } else if (edge == kSBOffscreenEdgeLeft) {
            transform = CGAffineTransformTranslate(transform, -size.width, 0);
        } else if (edge == kSBOffscreenEdgeBottom) {
            transform = CGAffineTransformTranslate(transform, 0, +size.height);
        } else if (edge == kSBOffscreenEdgeRight) {
            transform = CGAffineTransformTranslate(transform, +size.width, 0);
        }
    }

    if (edge == kSBOffscreenEdgeTop) {
        transform = CGAffineTransformRotate(transform, 0);
    } else if (edge == kSBOffscreenEdgeLeft) {
        anchorPoint = CGPointMake(0.5, 1.11); // XXX: magic
        transform = CGAffineTransformRotate(transform, M_PI / (2.0 / 3.0));
    } else if (edge == kSBOffscreenEdgeBottom) {
        transform = CGAffineTransformRotate(transform, M_PI);
    } else if (edge == kSBOffscreenEdgeRight) {
        anchorPoint = CGPointMake(0.5, 1.11); // XXX: magic
        transform = CGAffineTransformRotate(transform, M_PI / 2.0);
    }

    [grabberView.layer setAnchorPoint:anchorPoint];
    [grabberView setTransform:transform];
}

- (BOOL)visibleAtAnyEdge {
    return [_grabberViews count] != 0;
}

- (BOOL)visibleAtEdge:(SBOffscreenEdge)edge {
    return [_grabberViews objectForKey:SBOffscreenEdgeKey(edge)] != nil;
}

- (void)showAtEdge:(SBOffscreenEdge)edge animated:(BOOL)animated {
    SBBulletinListTabView *grabberView = [[objc_getClass("SBBulletinListTabView") alloc] init];

    UIWindow *window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    [window setWindowLevel:999999.0];
    [window setUserInteractionEnabled:NO];
    [window setHidden:NO];

    UIView *rotationView = [[UIView alloc] initWithFrame:[window bounds]];
    [rotationView setUserInteractionEnabled:NO];
    ZephyrRotateViewFromOrientationToOrientation(rotationView, UIInterfaceOrientationPortrait, ZephyrCurrentInterfaceOrientation(), YES);
    [rotationView addSubview:grabberView];
    [window addSubview:rotationView];
    [rotationView release];

    CGRect windowFrame = [rotationView bounds];
    CGRect frame = [grabberView frame];
    if (edge == kSBOffscreenEdgeTop) {
        frame = CGRectMake(roundf((windowFrame.size.width - frame.size.width) / 2), 0, frame.size.width, frame.size.height);
    } else if (edge == kSBOffscreenEdgeLeft) {
        frame = CGRectMake(0, roundf((windowFrame.size.height - frame.size.height) / 2), frame.size.width, frame.size.height);
    } else if (edge == kSBOffscreenEdgeBottom) {
        frame = CGRectMake(roundf((windowFrame.size.width - frame.size.width) / 2), windowFrame.size.height - frame.size.height, frame.size.width, frame.size.height);
    } else if (edge == kSBOffscreenEdgeRight) {
        frame = CGRectMake(windowFrame.size.width - frame.size.width, roundf((windowFrame.size.height - frame.size.height) / 2), frame.size.width, frame.size.height);
    }
    [grabberView setFrame:frame];

    [self transformGrabberView:grabberView offscreen:YES atEdge:edge];
    [UIView animateWithDuration:kGrabberControllerAnimationDuration animations:^{
        [self transformGrabberView:grabberView offscreen:NO atEdge:edge];
    }];

    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, kGrabberControllerHideTemporalOffset * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
        [self hideAtEdge:edge animated:animated];
    });

    [_grabberViews setObject:grabberView forKey:SBOffscreenEdgeKey(edge)];
    [_grabberWindows setObject:window forKey:SBOffscreenEdgeKey(edge)];
}

- (void)hideAtEdge:(SBOffscreenEdge)edge animated:(BOOL)animated {
    SBBulletinListTabView *grabberView = [_grabberViews objectForKey:SBOffscreenEdgeKey(edge)];
    UIWindow *window = [_grabberWindows objectForKey:SBOffscreenEdgeKey(edge)];

    if (grabberView == nil) {
        return;
    }

    [UIView animateWithDuration:kGrabberControllerAnimationDuration animations:^{
        [self transformGrabberView:grabberView offscreen:YES atEdge:edge];
    } completion:^(BOOL completed) {
        [grabberView removeFromSuperview];
        [grabberView release];

        [window setHidden:YES];
        [window release];
    }];

    [_grabberViews removeObjectForKey:SBOffscreenEdgeKey(edge)];
    [_grabberWindows removeObjectForKey:SBOffscreenEdgeKey(edge)];
}

- (BOOL)pointInside:(CGPoint)point atEdge:(SBOffscreenEdge)edge {
    SBBulletinListTabView *grabberView = [_grabberViews objectForKey:SBOffscreenEdgeKey(edge)];

    if (grabberView == nil) {
        return NO;
    }

    CGRect grabberFrame = [grabberView frame];
    grabberFrame = CGRectInset(grabberFrame, -10.0, -10.0);

    if (edge == kSBOffscreenEdgeLeft || edge == kSBOffscreenEdgeRight) {
        return point.y > CGRectGetMinY(grabberFrame) && point.y < CGRectGetMaxY(grabberFrame);
    } else if (edge == kSBOffscreenEdgeTop || edge == kSBOffscreenEdgeBottom) {
        return point.x > CGRectGetMinX(grabberFrame) && point.x < CGRectGetMaxX(grabberFrame);
    } else {
        return NO;
    }
}

@end


