#import "Common.h"
#import "Switcher.h"
#import "ActivateSwitcher.h"
#import "Preferences.h"
#import "Keyboard.h"
#import "NSTimer+Blocks.h"

#import "SwitchApp.h"

#include <dlfcn.h>

@implementation ZephyrSwitcherGesture

- (BOOL)shouldActivateAtEdge:(SBOffscreenEdge)edge {
    SBApplication *topApplication = [SBApp _accessibilityFrontMostApplication];
    if (topApplication == nil) topApplication = MSHookIvar<SBApplication *>([objc_getClass("SBUIController") sharedInstance], "_pendingAppActivatedByGesture");

    BOOL displayFlagsAllowed = YES;

    // Ensure topApplication is properly launched and ready.
    if (topApplication != nil) {
        if ([topApplication displayFlag:0x3]) displayFlagsAllowed = NO;
        if (![topApplication displayFlag:0x1]) displayFlagsAllowed = NO;
    }

    BOOL disableKeyboard = [(NSNumber *) ZephyrPreferencesGet(@"BottomDisableKeyboard", ZephyrPreferencesGet(@"DisableKeyboard", [NSNumber numberWithBool:YES])) boolValue];
    if (disableKeyboard) {
        if (ZephyrKeyboardIsActive()) return NO;
    }

    NSString *topIdentifier = [topApplication displayIdentifier];
    BOOL disableIdentifier = [(NSNumber *) ZephyrPreferencesGet([NSString stringWithFormat:@"BottomDisable-%@", topIdentifier], (id)kCFBooleanFalse) boolValue];
    if (disableIdentifier) return NO;

    SwipeUpAction action = (SwipeUpAction) [(NSNumber *) ZephyrPreferencesGet(@"SwipeUpAction", [NSNumber numberWithInt:kSwipeUpActionCloseApp]) intValue];

    // This is needed to prevent re-activation before the animation completes, crashing.
    BOOL currentlyPendingSwitcherActivationsExist = (pendingSwitcherActivations != nil);
    BOOL switchAppGestureIsAnimating = ZephyrSwitchAppGestureIsAnimatingCompletion();

    return YES
        // Our configuration allows this.
        && (action == kSwipeUpActionSwitcher || action == kSwipeUpActionCloseApp)
        && [self currentOrientationIsSupported]
        // No other gesture is in the way.
        && ![SBApp _accessibilityIsSystemGestureActive]
        && !switchAppGestureIsAnimating
        && !currentlyPendingSwitcherActivationsExist
        // We aren't in some disallowed state.
        && !ZephyrAssistantIsVisible()
        && (topApplication == nil || displayFlagsAllowed)
        && ![[objc_getClass("SBIconController") sharedInstance] isEditing]
        && ![[objc_getClass("SBAwayController") sharedAwayController] isLocked]
        && ![[objc_getClass("SBUIController") sharedInstance] isSwitcherShowing]
        && ![[objc_getClass("SBBulletinWindowController") sharedInstance] isBusy]
        && ![[objc_getClass("SBBulletinListController") sharedInstanceIfExists] listViewIsActive];
}

- (BOOL)shouldUseGrabberAtEdge:(SBOffscreenEdge)edge {
    return [(NSNumber *) ZephyrPreferencesGet(@"BottomGrabberEnabled", [NSNumber numberWithBool:NO]) boolValue];
}

- (BOOL)currentOrientationIsSupported {
    return YES;
}

- (SwipeUpAction)effectiveSwipeUpAction {
    SwipeUpAction action = (SwipeUpAction) [(NSNumber *) ZephyrPreferencesGet(@"SwipeUpAction", [NSNumber numberWithInt:kSwipeUpActionCloseApp]) intValue];
    SBApplication *topApplication = [SBApp _accessibilityFrontMostApplication];

    if (action == kSwipeUpActionCloseApp && topApplication == nil) {
        action = kSwipeUpActionSwitcher;
    }

    return action;
}

- (void)cleanupViews {
    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (app != nil) {
        [app disableContextHostingForRequester:(CFStringRef) @"SwitchApp"];
    } else {
        [SBApp showSpringBoardStatusBar];
    }


    [switcherView removeFromSuperview];
    [switcherView release];
    switcherView = nil;

    [shadowView removeFromSuperview];
    [shadowView release];
    shadowView = nil;

    [appView removeFromSuperview];
    [appView release];
    appView = nil;

    [wrapperView removeFromSuperview];
    [wrapperView release];
    wrapperView = nil;


    for (NSArray *locationAndTimer in pendingSwitcherActivations) {
        NSTimer *timer = [locationAndTimer objectAtIndex:1];
        [timer invalidate];
    }

    [pendingSwitcherActivations release];
    pendingSwitcherActivations = nil;


    [[objc_getClass("SBOrientationLockManager") sharedInstance] setLockOverrideEnabled:NO forReason:@"ZephyrSwitcher"];
    if ([SBApp _accessibilityFrontMostApplication] != nil) [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:0.0f];
}

- (void)handleGestureCanceled {
    // XXX: implement this correctly
}

- (void)positionAtLocation:(CGFloat)location {
    CGRect appFrame = [appView frame];
    CGRect shadowFrame = [shadowView frame];
    appFrame.origin.y = location;
    shadowFrame.origin.y = appFrame.size.height + location;
    [appView setFrame:appFrame];
    [shadowView setFrame:shadowFrame];
}

- (void)handleGestureBeganWithLocation:(CGFloat)location {
    pendingSwitcherActivations = [[NSMutableSet alloc] init];
    [[objc_getClass("SBOrientationLockManager") sharedInstance] setLockOverrideEnabled:YES forReason:@"ZephyrSwitcher"];
    if ([SBApp _accessibilityFrontMostApplication] != nil) [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:1.0f];

    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        UIInterfaceOrientation currentOrientation = ZephyrDeviceInterfaceOrientation();
        [[UIDevice currentDevice] setOrientation:currentOrientation animated:NO];
        [SBApp noteInterfaceOrientationChanged:currentOrientation];
    }

    location = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());

    UIView *rootView = [[objc_getClass("SBUIController") sharedInstance] contentView];
    wrapperView = [[UIView alloc] initWithFrame:[rootView bounds]];
    ZephyrRotateViewFromOrientationToOrientation(wrapperView, ZephyrHomeInterfaceOrientation(), ZephyrCurrentInterfaceOrientation(), YES);
    [rootView addSubview:wrapperView];

    appView = [[UIView alloc] initWithFrame:[wrapperView bounds]];
    [appView setClipsToBounds:NO];
    [wrapperView addSubview:appView];

    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (app != nil) {
        UIView *gestureView = ZephyrViewForApplication(app);

        UIView *gestureWrapperView = [[UIView alloc] initWithFrame:[appView bounds]];
        [gestureWrapperView addSubview:gestureView];
        [appView addSubview:gestureWrapperView];

        if (UIInterfaceOrientationIsLandscape(ZephyrCurrentInterfaceOrientation())) {
            ZephyrRotateViewFromOrientationToOrientation(gestureWrapperView, UIInterfaceOrientationPortrait, ZephyrOrientationFlip(ZephyrCurrentInterfaceOrientation()), YES);
        } else if (ZephyrCurrentInterfaceOrientation() == UIInterfaceOrientationPortraitUpsideDown) {
            ZephyrRotateViewFromOrientationToOrientation(gestureWrapperView, UIInterfaceOrientationPortrait, ZephyrCurrentInterfaceOrientation(), YES);
        }
    } else {
        UIView *homeView = ZephyrViewWithScreenshotOfHomeScreen();
        [appView addSubview:homeView];

        [SBApp hideSpringBoardStatusBar];

        // Call private UIKit API to cancel touches on the icon lists while swiping.
        // This fixes the bug where swiping up on an icon would start editing mode.
        if ([SBApp respondsToSelector:@selector(_cancelAllTouches)])
            [SBApp performSelector:@selector(_cancelAllTouches)];
    }

    shadowView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"SwitcherShadowTop.png"]];
    CGRect shadowFrame = [shadowView frame];
    shadowFrame.size = [[shadowView image] size];
    shadowFrame.origin.y = [appView bounds].size.height;
    shadowFrame.size.width = [appView bounds].size.width;
    [shadowView setFrame:shadowFrame];
    [wrapperView addSubview:shadowView];

    [[objc_getClass("SBAppSwitcherController") sharedInstance] setupForApp:app orientation:ZephyrCurrentInterfaceOrientation()];
    switcherView = [[objc_getClass("SBAppSwitcherController") sharedInstance] view];
    CGFloat bottomBarHeight = ZephyrAppSwitcherHeight();
    CGRect switcherFrame = [switcherView frame];
    switcherFrame.origin.y = [appView bounds].size.height - bottomBarHeight;
    [switcherView setFrame:switcherFrame];
    [switcherView retain];

    if ([self effectiveSwipeUpAction] == kSwipeUpActionCloseApp) {
        [[objc_getClass("SBUIController") sharedInstance] restoreIconListAnimated:NO animateWallpaper:NO keepSwitcher:NO];
        [[objc_getClass("SBUIController") sharedInstance] notifyAppResignActive:app];
    } else if ([self effectiveSwipeUpAction] == kSwipeUpActionSwitcher) {
        [wrapperView addSubview:switcherView];
        [wrapperView sendSubviewToBack:switcherView];
    }

    [UIView animateWithDuration:0.08f animations:^{
        CGFloat loc = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());
        [self positionAtLocation:loc];
    }];
}

- (void)cancelTimersForMovementToLocation:(CGFloat)location {
    // Remove pending switcher activations outside range.
    NSMutableSet *pendingSwitcherActivationsToRemove = [NSMutableSet set];

    for (NSArray *locationAndTimer in pendingSwitcherActivations) {
        CGFloat originalLocation = [[locationAndTimer objectAtIndex:0] floatValue];
        NSTimer *timer = [locationAndTimer objectAtIndex:1];

        CGFloat allowableMovementDistance = 5.0f;
        if (fabsf(originalLocation - location) > allowableMovementDistance) {
            [timer invalidate];
            [pendingSwitcherActivationsToRemove addObject:locationAndTimer];
        }
    }

    [pendingSwitcherActivations minusSet:pendingSwitcherActivationsToRemove];
}

- (void)handleGestureChangedWithLocation:(CGFloat)location velocity:(CGPoint)velocity {
    location = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());

    // constrain to not going way off the screen
    if (location > 20.0f) location = 20.0f;

    // constrain to top of switcher
    if ([self effectiveSwipeUpAction] == kSwipeUpActionSwitcher) {
        CGFloat bottomBarHeight = ZephyrAppSwitcherHeight();

        if (-location > bottomBarHeight) {
            location = ZephyrScreenRounded((location + bottomBarHeight) * 0.2f - bottomBarHeight);
        }
    }

    [self positionAtLocation:location];


    // If we are closing the app, support switcher activation.
    CGFloat delay = [ZephyrPreferencesGet(@"BottomSwitcherActivationDelay", [NSNumber numberWithFloat:0.8f]) floatValue];
    if ([self effectiveSwipeUpAction] == kSwipeUpActionCloseApp && delay != 0.0) {
        [self cancelTimersForMovementToLocation:location];

        // No need to clear this from the timer list when done because the pendingSwitcherActiavtions is cleared when it fires.
        [pendingSwitcherActivations addObject:[NSArray arrayWithObjects:[NSNumber numberWithFloat:location], [NSTimer zephyrScheduledTimerWithTimeInterval:delay block:^(NSTimer *timer) {
            if (![self isActive]) return; // prevent double activations

            [self showSwitcherFromCurrentPosition];
            [self cancelGesture];
        } repeats:NO], nil]];
    }
}

- (void)handleGestureEndedWithLocation:(CGFloat)location velocity:(CGPoint)velocity completionType:(int)type {
    location = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());

    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if ([self effectiveSwipeUpAction] == kSwipeUpActionSwitcher) {
        if (velocity.y < 0) {
            CGFloat bottomBarHeight = ZephyrAppSwitcherHeight();

            // compensate for stretching, find real visual position
            if (-location > bottomBarHeight) {
                location = ZephyrScreenRounded((location + bottomBarHeight) * 0.2f - bottomBarHeight);
            }

            CGFloat from = -location;
            CGFloat to = bottomBarHeight;
            CGFloat duration = 0.3f;

            if ([[objc_getClass("SBIconController") sharedInstance] openFolder] != nil) {
                [UIView animateWithDuration:duration animations:^{
                    [self positionAtLocation:-to];
                } completion:^(BOOL completed) {
                    [self cleanupViews];

                    ZephyrActivateSwitcherFromToDuration(to, to, duration);
                }];
            } else {
                dispatch_async(dispatch_get_main_queue(), ^{
                    [self cleanupViews];

                    ZephyrActivateSwitcherFromToDuration(from, to, duration);
                });
            }
        } else {
            [UIView animateWithDuration:0.3f animations:^{
                [self positionAtLocation:0];
            } completion:^(BOOL completed) {
                [self cleanupViews];
            }];
        }
    } else {
        if (type == 1) {
            [SBApp showSpringBoardStatusBar];

            UIViewAnimationOptions options = (UIViewAnimationOptionCurveEaseOut | UIViewAnimationOptionBeginFromCurrentState);
            [UIView animateWithDuration:0.3f delay:0.0f options:options animations:^{
                CGFloat completedLocation = -[wrapperView bounds].size.height;
                [self positionAtLocation:completedLocation];
            } completion:^(BOOL completed) {
                [self cleanupViews];

                // In this case, we definitely do not want to hide this.
                [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:1.0f];

                ZephyrDeactivateFrontmostApplication();
            }];
        } else {
            [UIView animateWithDuration:0.3f animations:^{
                [self positionAtLocation:0];
            } completion:^(BOOL completed) {
                [self cleanupViews];

                [[objc_getClass("SBUIController") sharedInstance] notifyAppResumeActive:app];
                [[objc_getClass("SBUIController") sharedInstance] stopRestoringIconList];
                [[objc_getClass("SBUIController") sharedInstance] tearDownIconListAndBar];
            }];
        }
    }
}

- (void)showSwitcherFromCurrentPosition {
    CGFloat bottomBarHeight = ZephyrAppSwitcherHeight();

    UIView *homeView = ZephyrViewWithScreenshotOfHomeScreen();
    [homeView setFrame:[wrapperView bounds]];

    if ([[UIDevice currentDevice] userInterfaceIdiom] != UIUserInterfaceIdiomPad) {
        // Disable rotation on the iPad as the view behind is already rotated, so rotating it again is unnecessary.
        if (UIInterfaceOrientationIsLandscape(ZephyrCurrentInterfaceOrientation())) {
            ZephyrRotateViewFromOrientationToOrientation(homeView, UIInterfaceOrientationPortrait, ZephyrOrientationFlip(ZephyrCurrentInterfaceOrientation()), YES);
        } else if (ZephyrCurrentInterfaceOrientation() == UIInterfaceOrientationPortraitUpsideDown) {
            ZephyrRotateViewFromOrientationToOrientation(homeView, UIInterfaceOrientationPortrait, ZephyrCurrentInterfaceOrientation(), YES);
        }
    }

    // XXX: this is a horrible hack
    UIImageView *switcherShadowView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"SwitcherShadowTop.png"]];
    CGRect shadowFrame = [switcherShadowView frame];
    shadowFrame.size = [[switcherShadowView image] size];
    shadowFrame.size.width = [wrapperView bounds].size.width;
    shadowFrame.origin.y = [wrapperView bounds].size.height;
    [switcherShadowView setFrame:shadowFrame];
    [switcherShadowView autorelease];

    CGRect switcherFrame = [switcherView frame];
    switcherFrame.origin.y = [wrapperView bounds].size.height - bottomBarHeight;
    [switcherView setFrame:switcherFrame];

    [wrapperView addSubview:switcherView];
    [wrapperView addSubview:switcherShadowView];
    [wrapperView addSubview:homeView];
    [wrapperView addSubview:shadowView];
    [wrapperView addSubview:appView];

    [UIView animateWithDuration:0.4f animations:^{
        [self positionAtLocation:-bottomBarHeight];

        [shadowView setAlpha:0.0f];

        CGRect switcherShadowFrame = [switcherShadowView frame];
        CGRect homeFrame = [homeView frame];
        switcherShadowFrame.origin.y = [wrapperView bounds].size.height + -bottomBarHeight;
        homeFrame.origin.y = -bottomBarHeight;
        [switcherShadowView setFrame:switcherShadowFrame];
        [homeView setFrame:homeFrame];
    } completion:^(BOOL finished) {
        [self cleanupViews];

        [homeView removeFromSuperview];
        [switcherShadowView removeFromSuperview];

        ZephyrActivateSwitcherFromToDuration(bottomBarHeight, bottomBarHeight, 0.0f);
    }];
}

@end

%group Switcher

%hook SBAppSwitcherBarView

- (id)initWithFrame:(CGRect)frame {
    self = %orig;

    // this stupidiy is necessary because Apple limits SBLinenView to 320px wide on iPhone
    SBLinenView *linen = nil;

    CGFloat height = 320.0f;
    CGFloat width = ZephyrWidthForOrientation(UIInterfaceOrientationPortrait);

    UIView *backgroundView = MSHookIvar<UIView *>(self, "_backgroundView");
    ZephyrRotateViewFromOrientationToOrientation(backgroundView, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);

    linen = [[objc_getClass("SBLinenView") alloc] initWithFrame:CGRectMake(0, [self bounds].size.height - height, width, height)];
    [linen setAutoresizingMask:UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleTopMargin];
    ZephyrRotateViewFromOrientationToOrientation(linen, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);
    [self addSubview:linen];
    [self sendSubviewToBack:linen];
    [linen release];

    linen = [[objc_getClass("SBLinenView") alloc] initWithFrame:CGRectMake(ZephyrScreenRounded(([self bounds].size.width - width) / 2.0f), [self bounds].size.height - height, width, height)];
    [linen setAutoresizingMask:UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleTopMargin];
    ZephyrRotateViewFromOrientationToOrientation(linen, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);
    [self addSubview:linen];
    [self sendSubviewToBack:linen];
    [linen release];

    linen = [[objc_getClass("SBLinenView") alloc] initWithFrame:CGRectMake([self bounds].size.width - width, [self bounds].size.height - height, width, height)];
    [linen setAutoresizingMask:UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin];
    ZephyrRotateViewFromOrientationToOrientation(linen, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);
    [self addSubview:linen];
    [self sendSubviewToBack:linen];
    [linen release];

    return self;
}

%end

%hook SBUIController

static ZephyrSwitcherGesture *gesture = nil;

- (void)finishLaunching {
    %orig;

    NSInteger touches = [(NSNumber *) ZephyrPreferencesGet(@"BottomMinimumTouchCount", ZephyrPreferencesGet(@"MinimumTouchCount", [NSNumber numberWithInt:1])) intValue];
    CGFloat edgeMargin = [(NSNumber *) ZephyrPreferencesGet(@"BottomSensitivityDistance", [NSNumber numberWithFloat:30.0f]) floatValue];

    gesture = [[ZephyrSwitcherGesture alloc] init];
    [gesture addOffscreenEdge:kSBOffscreenEdgeBottom minimumTouchCount:touches edgeMargin:edgeMargin];

    ZephyrPreferencesApplyActionRegister(^{
        NSInteger touches = [(NSNumber *) ZephyrPreferencesGet(@"BottomMinimumTouchCount", ZephyrPreferencesGet(@"MinimumTouchCount", [NSNumber numberWithInt:1])) intValue];
        CGFloat edgeMargin = [(NSNumber *) ZephyrPreferencesGet(@"BottomSensitivityDistance", [NSNumber numberWithFloat:30.0f]) floatValue];

        for (SBOffscreenSwipeGestureRecognizer *recognizer in [gesture gestureRecognizers]) {
            [recognizer setMinTouches:touches];
            [recognizer setEdgeMargin:edgeMargin];
        }
    });
}

%end

%end

%ctor {
    %init(Switcher);
}

