#import "Common.h"
#import "Switcher.h"
#import "Preferences.h"
#import "Keyboard.h"
#import "NSTimer+Blocks.h"

#import "SwitchApp.h"

#include <dlfcn.h>

static BOOL disableUnscatterFlag = NO;

@interface SBMusicController : NSObject
- (void) switcherDidShow:(double)duration orientation:(UIInterfaceOrientation)orientation;
@end

static void OpenMusicControlsTaskSwitcherIfNecessaryWithDuration(double duration) {
    Class $SBMusicController = objc_getClass("SBMusicController");
    if ($SBMusicController) {
        bool defaultValue = YES;
        CFPreferencesSynchronize((CFStringRef)@"com.phoenix.musiccontrols.task", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        CFBooleanRef val = (CFBooleanRef) CFPreferencesCopyAppValue((CFStringRef) @"Controls", (CFStringRef) @"com.phoenix.musiccontrols.task");

        if (val) {
            defaultValue = [(NSNumber*) val boolValue];
            CFRelease(val);
        }

        if (defaultValue) {
            [[$SBMusicController sharedInstance] switcherDidShow:duration orientation:ZephyrCurrentInterfaceOrientation()];
        }
    }
}

static void DeactivateFrontmostApplication() {
    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (objc_getClass("SBDisplayStack") != nil) {
        // Stolen from SwitchApp.xmi; this is a bad decompliation of
        // what a different function does than the one I am reversing.
        [app setDeactivationSetting:24 flag:YES];
        [app setDeactivationSetting:18 flag:YES];

        /* sub_2C330 */ {
            if ([SBWActiveDisplayStack containsDisplay:app] || [SBWSuspendedEventOnlyDisplayStack containsDisplay:app]) {

                /* sub_2B9B8 */ {
                    // this is a crude approximation of sorta kinda what this gigantic
                    // function does, since I'm waaaaay too lazy to reverse the whole
                    // thing: even just the graph in IDA is quite scary to look at! :(
                    [SBWActiveDisplayStack popDisplay:app];
                    [SBWSuspendingDisplayStack pushDisplay:app];
                }
            } else if (![SBWSuspendingDisplayStack containsDisplay:app]) {
                [app clearDeactivationSettings];
            }
        }
    } else {
        // Force iPhone devices to portrait for the home screen.
        // Should be generalized; the iPhone might be hacked for more orientations.
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
            UIInterfaceOrientation currentOrientation = ZephyrHomeInterfaceOrientation();
            [[UIDevice currentDevice] setOrientation:currentOrientation animated:NO];
            [SBApp noteInterfaceOrientationChanged:currentOrientation];
        }

        [app setDeactivationSetting:0x15 flag:YES];
        [app setDeactivationSetting:0x16 flag:YES];

        NSString *label = @"ActivateSpringBoard";
        SBWorkspaceEvent *event = [objc_getClass("SBWorkspaceEvent") eventWithLabel:label handler:^{
            BKSWorkspace *workspace = [SBWSharedWorkspace bksWorkspace];
            SBAppToAppWorkspaceTransaction *transaction = [[objc_getClass("SBAppToAppWorkspaceTransaction") alloc] initWithWorkspace:workspace alertManager:nil from:app to:nil];
            [SBWSharedWorkspace setCurrentTransaction:transaction];
            [transaction release];
        }];

        [[objc_getClass("SBWorkspaceEventQueue") sharedInstance] executeOrAppendEvent:event];
    }
}

static BOOL activateSwitcherCustom = NO;
static CGFloat activateSwitcherFrom = 0.0;
static CGFloat activateSwitcherTo = 0.0;

%group ActivateSwitcher

%hook SBUIController

- (BOOL)_canActivateShowcaseIgnoringTouches:(BOOL)touches {
    if (activateSwitcherCustom) {
        return YES;
    }

    return %orig;
}

- (SBShowcaseContext *)_showcaseContextForOffset:(CGFloat)offset {
    if (activateSwitcherCustom) {
        if (offset == 0.0) {
            offset = activateSwitcherFrom;
        } else {
            offset = activateSwitcherTo;
        }
    }

    SBShowcaseContext *context = %orig;

    if (activateSwitcherCustom) {
        [context setShowcaseOrientation:ZephyrCurrentInterfaceOrientation()];
    }

    return context;
}

%end

%end

%ctor {
    %init(ActivateSwitcher);
}

static void ActivateSwitcherFromToDuration(CGFloat from, CGFloat to, CGFloat duration) {
    SBUIController *uic = [objc_getClass("SBUIController") sharedInstance];
    SBAppSwitcherController *switcher = [objc_getClass("SBAppSwitcherController") sharedInstance];

    if (!ZephyrMultitaskingSupported()) return;
    if ([switcher printViewIsShowing]) return;
    if ([uic isSwitcherShowing]) return;

    activateSwitcherCustom = YES;
    activateSwitcherFrom = from;
    activateSwitcherTo = to;

    [uic _activateSwitcher:duration];

    activateSwitcherTo = 0.0;
    activateSwitcherFrom = 0.0;
    activateSwitcherCustom = NO;

    // Support Music Controls Pro, code by phoenixdev.
    OpenMusicControlsTaskSwitcherIfNecessaryWithDuration(duration);
}

@implementation ZephyrSwitcherGesture

- (BOOL)shouldActivateAtEdge:(SBOffscreenEdge)edge {
    SBApplication *topApplication = [SBApp _accessibilityFrontMostApplication];
    if (topApplication == nil) topApplication = MSHookIvar<SBApplication *>([objc_getClass("SBUIController") sharedInstance], "_pendingAppActivatedByGesture");

    BOOL displayFlagsAllowed = YES;

    // Ensure topApplication is properly launched and ready.
    if (topApplication != nil) {
        if ([topApplication displayFlag:0x3]) displayFlagsAllowed = NO;
        if (![topApplication displayFlag:0x1]) displayFlagsAllowed = NO;
    }

    BOOL disableKeyboard = [(NSNumber *) ZephyrPreferencesGet(@"BottomDisableKeyboard", ZephyrPreferencesGet(@"DisableKeyboard", [NSNumber numberWithBool:YES])) boolValue];
    if (disableKeyboard) {
        if (ZephyrKeyboardIsActive()) return NO;
    }

    NSString *topIdentifier = [topApplication displayIdentifier];
    BOOL disableIdentifier = [(NSNumber *) ZephyrPreferencesGet([NSString stringWithFormat:@"BottomDisable-%@", topIdentifier], (id)kCFBooleanFalse) boolValue];
    if (disableIdentifier) return NO;

    SwipeUpAction action = (SwipeUpAction) [(NSNumber *) ZephyrPreferencesGet(@"SwipeUpAction", [NSNumber numberWithInt:kSwipeUpActionCloseApp]) intValue];

    // This is needed to prevent re-activation before the animation completes, crashing.
    BOOL currentlyPendingSwitcherActivationsExist = (pendingSwitcherActivations != nil);
    BOOL switchAppGestureIsAnimating = ZephyrSwitchAppGestureIsAnimatingCompletion();

    return ![SBApp _accessibilityIsSystemGestureActive]
        && ![[objc_getClass("SBAwayController") sharedAwayController] isLocked]
        && ![[objc_getClass("SBUIController") sharedInstance] isSwitcherShowing]
        && !ZephyrAssistantIsVisible()
        && ![[objc_getClass("SBBulletinWindowController") sharedInstance] isBusy]
        && ![[objc_getClass("SBBulletinListController") sharedInstanceIfExists] listViewIsActive]
        && ![[objc_getClass("SBIconController") sharedInstance] isEditing]
        && !currentlyPendingSwitcherActivationsExist
        && !switchAppGestureIsAnimating
        && [self currentOrientationIsSupported]
        && (topApplication == nil || displayFlagsAllowed)
        && (action == kSwipeUpActionSwitcher || action == kSwipeUpActionCloseApp);
}

- (BOOL)shouldUseGrabberAtEdge:(SBOffscreenEdge)edge {
    return [(NSNumber *) ZephyrPreferencesGet(@"BottomGrabberEnabled", NO) boolValue];
}

- (BOOL)currentOrientationIsSupported {
    return YES;
}

- (SwipeUpAction)effectiveSwipeUpAction {
    SwipeUpAction action = (SwipeUpAction) [(NSNumber *) ZephyrPreferencesGet(@"SwipeUpAction", [NSNumber numberWithInt:kSwipeUpActionCloseApp]) intValue];
    SBApplication *topApplication = [SBApp _accessibilityFrontMostApplication];

    if (action == kSwipeUpActionCloseApp && topApplication == nil) {
        action = kSwipeUpActionSwitcher;
    }

    return action;
}

- (void)cleanupViews {
    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (app != nil) {
        [app disableContextHostingForRequester:(CFStringRef) @"SwitchApp"];
    } else {
        [SBApp showSpringBoardStatusBar];
    }


    [switcherView removeFromSuperview];
    [switcherView release];
    switcherView = nil;

    [shadowView removeFromSuperview];
    [shadowView release];
    shadowView = nil;

    [appView removeFromSuperview];
    [appView release];
    appView = nil;

    [wrapperView removeFromSuperview];
    [wrapperView release];
    wrapperView = nil;


    for (NSArray *locationAndTimer in pendingSwitcherActivations) {
        NSTimer *timer = [locationAndTimer objectAtIndex:1];
        [timer invalidate];
    }

    [pendingSwitcherActivations release];
    pendingSwitcherActivations = nil;


    [[objc_getClass("SBOrientationLockManager") sharedInstance] setLockOverrideEnabled:NO forReason:@"ZephyrSwitcher"];
    if ([SBApp _accessibilityFrontMostApplication] != nil) [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:0.0f];
}

- (void)handleGestureCanceled {
    // XXX: implement this correctly
}

- (void)positionAtLocation:(CGFloat)location {
    CGRect appFrame = [appView frame];
    CGRect shadowFrame = [shadowView frame];
    appFrame.origin.y = location;
    shadowFrame.origin.y = appFrame.size.height + location;
    [appView setFrame:appFrame];
    [shadowView setFrame:shadowFrame];
}

- (void)handleGestureBeganWithLocation:(CGFloat)location {
    pendingSwitcherActivations = [[NSMutableSet alloc] init];
    [[objc_getClass("SBOrientationLockManager") sharedInstance] setLockOverrideEnabled:YES forReason:@"ZephyrSwitcher"];
    if ([SBApp _accessibilityFrontMostApplication] != nil) [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:1.0f];

    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        UIInterfaceOrientation currentOrientation = ZephyrDeviceInterfaceOrientation();
        [[UIDevice currentDevice] setOrientation:currentOrientation animated:NO];
        [SBApp noteInterfaceOrientationChanged:currentOrientation];
    }

    location = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());

    UIView *rootView = [[objc_getClass("SBUIController") sharedInstance] contentView];
    wrapperView = [[UIView alloc] initWithFrame:[rootView bounds]];
    ZephyrRotateViewFromOrientationToOrientation(wrapperView, ZephyrHomeInterfaceOrientation(), ZephyrCurrentInterfaceOrientation(), YES);
    [rootView addSubview:wrapperView];

    appView = [[UIView alloc] initWithFrame:[wrapperView bounds]];
    [appView setClipsToBounds:NO];
    [wrapperView addSubview:appView];

    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if (app != nil) {
        UIView *gestureView = ZephyrViewForApplication(app);

        UIView *gestureWrapperView = [[UIView alloc] initWithFrame:[appView bounds]];
        [gestureWrapperView addSubview:gestureView];
        [appView addSubview:gestureWrapperView];

        if (UIInterfaceOrientationIsLandscape(ZephyrCurrentInterfaceOrientation())) {
            ZephyrRotateViewFromOrientationToOrientation(gestureWrapperView, UIInterfaceOrientationPortrait, ZephyrOrientationFlip(ZephyrCurrentInterfaceOrientation()), YES);
        } else if (ZephyrCurrentInterfaceOrientation() == UIInterfaceOrientationPortraitUpsideDown) {
            ZephyrRotateViewFromOrientationToOrientation(gestureWrapperView, UIInterfaceOrientationPortrait, ZephyrCurrentInterfaceOrientation(), YES);
        }
    } else {
        UIView *homeView = ZephyrViewWithScreenshotOfHomeScreen();
        [appView addSubview:homeView];

        [SBApp hideSpringBoardStatusBar];

        // Call private UIKit API to cancel touches on the icon lists while swiping.
        // This fixes the bug where swiping up on an icon would start editing mode.
        if ([SBApp respondsToSelector:@selector(_cancelAllTouches)])
            [SBApp performSelector:@selector(_cancelAllTouches)];
    }

    shadowView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"SwitcherShadowTop.png"]];
    CGRect shadowFrame = [shadowView frame];
    shadowFrame.size = [[shadowView image] size];
    shadowFrame.origin.y = [appView bounds].size.height;
    shadowFrame.size.width = [appView bounds].size.width;
    [shadowView setFrame:shadowFrame];
    [wrapperView addSubview:shadowView];

    [[objc_getClass("SBAppSwitcherController") sharedInstance] setupForApp:app orientation:ZephyrCurrentInterfaceOrientation()];
    switcherView = [[objc_getClass("SBAppSwitcherController") sharedInstance] view];
    CGFloat bottomBarHeight = [[objc_getClass("SBAppSwitcherController") sharedInstance] bottomBarHeight];
    CGRect switcherFrame = [switcherView frame];
    switcherFrame.origin.y = [appView bounds].size.height - bottomBarHeight;
    [switcherView setFrame:switcherFrame];
    [switcherView retain];

    if ([self effectiveSwipeUpAction] == kSwipeUpActionCloseApp) {
        [[objc_getClass("SBUIController") sharedInstance] restoreIconListAnimated:NO animateWallpaper:NO keepSwitcher:NO];
        [[objc_getClass("SBUIController") sharedInstance] notifyAppResignActive:app];
    } else if ([self effectiveSwipeUpAction] == kSwipeUpActionSwitcher) {
        [wrapperView addSubview:switcherView];
        [wrapperView sendSubviewToBack:switcherView];
    }

    [UIView animateWithDuration:0.08f animations:^{
        CGFloat loc = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());
        [self positionAtLocation:loc];
    }];
}

- (void)handleGestureChangedWithLocation:(CGFloat)location velocity:(CGPoint)velocity {
    location = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());

    // constrain to not going way off the screen
    if (location > 20.0f) location = 20.0f;

    // constrain to top of switcher
    if ([self effectiveSwipeUpAction] == kSwipeUpActionSwitcher) {
        CGFloat bottomBarHeight = [[objc_getClass("SBAppSwitcherController") sharedInstance] bottomBarHeight];

        if (-location > bottomBarHeight) {
            location = ZephyrScreenRounded((location + bottomBarHeight) * 0.2f - bottomBarHeight);
        }
    }

    [self positionAtLocation:location];


    // If we are closing the app, support switcher activation.
    CGFloat delay = [ZephyrPreferencesGet(@"BottomSwitcherActivationDelay", [NSNumber numberWithFloat:0.8f]) floatValue];
    if ([self effectiveSwipeUpAction] == kSwipeUpActionCloseApp && delay != 0.0) {
        // Remove pending switcher activations outside range.
        NSMutableSet *pendingSwitcherActivationsToRemove = [NSMutableSet set];

        for (NSArray *locationAndTimer in pendingSwitcherActivations) {
            CGFloat originalLocation = [[locationAndTimer objectAtIndex:0] floatValue];
            NSTimer *timer = [locationAndTimer objectAtIndex:1];

            CGFloat allowableMovementDistance = 5.0f;
            if (fabs(originalLocation - location) > allowableMovementDistance) {
                [timer invalidate];
                [pendingSwitcherActivationsToRemove addObject:locationAndTimer];
            }
        }

        [pendingSwitcherActivations minusSet:pendingSwitcherActivationsToRemove];

        // No need to clear this from the timer list when done because the pendingSwitcherActiavtions is cleared when it fires.
        [pendingSwitcherActivations addObject:[NSArray arrayWithObjects:[NSNumber numberWithFloat:location], [NSTimer zephyrScheduledTimerWithTimeInterval:delay block:^(NSTimer *timer) {
            if (![self isActive]) return; // prevent double activations

            [self showSwitcherFromCurrentPosition];
            [self cancelGesture];
        } repeats:NO], nil]];
    }
}

- (void)handleGestureEndedWithLocation:(CGFloat)location velocity:(CGPoint)velocity completionType:(int)type {
    location = ZephyrHeightFromScreenPercentage(location, ZephyrCurrentInterfaceOrientation());

    SBApplication *app = [SBApp _accessibilityFrontMostApplication];

    if ([self effectiveSwipeUpAction] == kSwipeUpActionSwitcher) {
        if (velocity.y < 0) {
            CGFloat bottomBarHeight = [[objc_getClass("SBAppSwitcherController") sharedInstance] bottomBarHeight];

            // compensate for stretching, find real visual position
            if (-location > bottomBarHeight) {
                location = ZephyrScreenRounded((location + bottomBarHeight) * 0.2f - bottomBarHeight);
            }

            CGFloat from = -location;
            CGFloat to = bottomBarHeight;
            CGFloat duration = 0.3f;

            if ([[objc_getClass("SBIconController") sharedInstance] openFolder] != nil) {
                [UIView animateWithDuration:duration animations:^{
                    [self positionAtLocation:-to];
                } completion:^(BOOL completed) {
                    [self cleanupViews];

                    ActivateSwitcherFromToDuration(to, to, duration);
                }];
            } else {
                dispatch_async(dispatch_get_main_queue(), ^{
                    [self cleanupViews];

                    ActivateSwitcherFromToDuration(from, to, duration);
                });
            }
        } else {
            [UIView animateWithDuration:0.3f animations:^{
                [self positionAtLocation:0];
            } completion:^(BOOL completed) {
                [self cleanupViews];
            }];
        }
    } else {
        if (type == 1) {
            [SBApp showSpringBoardStatusBar];

            UIViewAnimationOptions options = (UIViewAnimationOptionCurveEaseOut | UIViewAnimationOptionBeginFromCurrentState);
            [UIView animateWithDuration:0.3f delay:0.0f options:options animations:^{
                CGFloat completedLocation = -[wrapperView bounds].size.height;
                [self positionAtLocation:completedLocation];
            } completion:^(BOOL completed) {
                [self cleanupViews];

                // In this case, we definitely do not want to hide this.
                [[[objc_getClass("SBUIController") sharedInstance] rootView] setAlpha:1.0f];

                // XXX: the "disableIconUnscatter" display flag there does not work, so:
                disableUnscatterFlag = YES;

                DeactivateFrontmostApplication();
            }];
        } else {
            [UIView animateWithDuration:0.3f animations:^{
                [self positionAtLocation:0];
            } completion:^(BOOL completed) {
                [self cleanupViews];

                [[objc_getClass("SBUIController") sharedInstance] notifyAppResumeActive:app];
                [[objc_getClass("SBUIController") sharedInstance] stopRestoringIconList];
                [[objc_getClass("SBUIController") sharedInstance] tearDownIconListAndBar];
            }];
        }
    }
}

- (void)showSwitcherFromCurrentPosition {
    CGFloat bottomBarHeight = [[objc_getClass("SBAppSwitcherController") sharedInstance] bottomBarHeight];

    UIView *homeView = ZephyrViewWithScreenshotOfHomeScreen();
    [homeView setFrame:[wrapperView bounds]];

    if ([[UIDevice currentDevice] userInterfaceIdiom] != UIUserInterfaceIdiomPad) {
        // Disable rotation on the iPad as the view behind is already rotated, so rotating it again is unnecessary.
        if (UIInterfaceOrientationIsLandscape(ZephyrCurrentInterfaceOrientation())) {
            ZephyrRotateViewFromOrientationToOrientation(homeView, UIInterfaceOrientationPortrait, ZephyrOrientationFlip(ZephyrCurrentInterfaceOrientation()), YES);
        } else if (ZephyrCurrentInterfaceOrientation() == UIInterfaceOrientationPortraitUpsideDown) { ZephyrRotateViewFromOrientationToOrientation(homeView, UIInterfaceOrientationPortrait, ZephyrCurrentInterfaceOrientation(), YES);
        }
    }

    // XXX: this is a horrible hack
    UIImageView *switcherShadowView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"SwitcherShadowTop.png"]];
    CGRect shadowFrame = [switcherShadowView frame];
    shadowFrame.size = [[switcherShadowView image] size];
    shadowFrame.size.width = [wrapperView bounds].size.width;
    shadowFrame.origin.y = [wrapperView bounds].size.height;
    [switcherShadowView setFrame:shadowFrame];
    [switcherShadowView autorelease];

    CGRect switcherFrame = [switcherView frame];
    switcherFrame.origin.y = [wrapperView bounds].size.height - bottomBarHeight;
    [switcherView setFrame:switcherFrame];

    [wrapperView addSubview:switcherView];
    [wrapperView addSubview:switcherShadowView];
    [wrapperView addSubview:homeView];
    [wrapperView addSubview:shadowView];
    [wrapperView addSubview:appView];

    [UIView animateWithDuration:0.4f animations:^{
        [self positionAtLocation:-bottomBarHeight];

        [shadowView setAlpha:0.0f];

        CGRect switcherShadowFrame = [switcherShadowView frame];
        CGRect homeFrame = [homeView frame];
        switcherShadowFrame.origin.y = [wrapperView bounds].size.height + -bottomBarHeight;
        homeFrame.origin.y = -bottomBarHeight;
        [switcherShadowView setFrame:switcherShadowFrame];
        [homeView setFrame:homeFrame];
    } completion:^(BOOL finished) {
        [self cleanupViews];

        [homeView removeFromSuperview];
        [switcherShadowView removeFromSuperview];

        ActivateSwitcherFromToDuration(bottomBarHeight, bottomBarHeight, 0.0f);
    }];
}

@end

%group Switcher

%hook SBAppSwitcherBarView

- (id)initWithFrame:(CGRect)frame {
    self = %orig;

    // this stupidiy is necessary because Apple limits SBLinenView to 320px wide on iPhone
    SBLinenView *linen = nil;

    CGFloat height = 320.0f;
    CGFloat width = ZephyrWidthForOrientation(UIInterfaceOrientationPortrait);

    ZephyrRotateViewFromOrientationToOrientation(MSHookIvar<UIView *>(self, "_backgroundView"), UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);

    linen = [[objc_getClass("SBLinenView") alloc] initWithFrame:CGRectMake(0, [self bounds].size.height - height, width, height)];
    [linen setAutoresizingMask:UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleTopMargin];
    ZephyrRotateViewFromOrientationToOrientation(linen, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);
    [self addSubview:linen];
    [self sendSubviewToBack:linen];
    [linen release];

    linen = [[objc_getClass("SBLinenView") alloc] initWithFrame:CGRectMake(ZephyrScreenRounded(([self bounds].size.width - width) / 2.0f), [self bounds].size.height - height, width, height)];
    [linen setAutoresizingMask:UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleTopMargin];
    ZephyrRotateViewFromOrientationToOrientation(linen, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);
    [self addSubview:linen];
    [self sendSubviewToBack:linen];
    [linen release];

    linen = [[objc_getClass("SBLinenView") alloc] initWithFrame:CGRectMake([self bounds].size.width - width, [self bounds].size.height - height, width, height)];
    [linen setAutoresizingMask:UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin];
    ZephyrRotateViewFromOrientationToOrientation(linen, UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, YES);
    [self addSubview:linen];
    [self sendSubviewToBack:linen];
    [linen release];

    return self;
}

%end

%hook SBUIController

static ZephyrSwitcherGesture *gesture = nil;

- (void)finishLaunching {
    %orig;

    int touches = [(NSNumber *) ZephyrPreferencesGet(@"BottomMinimumTouchCount", ZephyrPreferencesGet(@"MinimumTouchCount", [NSNumber numberWithInt:1])) intValue];
    CGFloat edgeMargin = [(NSNumber *) ZephyrPreferencesGet(@"BottomSensitivityDistance", [NSNumber numberWithFloat:30.0f]) floatValue];

    gesture = [[ZephyrSwitcherGesture alloc] init];
    [gesture addOffscreenEdge:kSBOffscreenEdgeBottom minimumTouchCount:touches edgeMargin:edgeMargin];

    ZephyrPreferencesApplyActionRegister(^{
        int touches = [(NSNumber *) ZephyrPreferencesGet(@"BottomMinimumTouchCount", ZephyrPreferencesGet(@"MinimumTouchCount", [NSNumber numberWithInt:1])) intValue];
        CGFloat edgeMargin = [(NSNumber *) ZephyrPreferencesGet(@"BottomSensitivityDistance", [NSNumber numberWithFloat:30.0f]) floatValue];

        for (SBOffscreenSwipeGestureRecognizer *recognizer in [gesture gestureRecognizers]) {
            [recognizer setMinTouches:touches];
            [recognizer setEdgeMargin:edgeMargin];
        }
    });
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    if (disableUnscatterFlag) {
        disableUnscatterFlag = NO;
        animated = NO;
    }

    %orig(animated, wallpaper, switcher);
}

%end

%end

%ctor {
    %init(Switcher);
}

