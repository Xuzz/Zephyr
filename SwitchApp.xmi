
#import "SwitchApp.h"
#import "Common.h"
#import "Preferences.h"
#import "Keyboard.h"

@implementation ZephyrSwitchAppGesture

- (BOOL)shouldActivateAtEdge:(SBOffscreenEdge)edge {
    BOOL disableKeyboard = [(NSNumber *) ZephyrPreferencesGet(@"SideDisableKeyboard", ZephyrPreferencesGet(@"DisableKeyboard", [NSNumber numberWithBool:YES])) boolValue];
    if (disableKeyboard) {
        if (ZephyrKeyboardIsActive()) return NO;
    }

    SBApplication *topApplication = [SBApp _accessibilityFrontMostApplication];

    if (topApplication != nil) {
        BOOL disableIdentifier = [(NSNumber *) ZephyrPreferencesGet([NSString stringWithFormat:@"SideDisable-%@", [topApplication displayIdentifier]], (NSNumber *) kCFBooleanFalse) boolValue];
        if (disableIdentifier) return NO;
    }

    // Put this after the above check so you can quickly page through disabled apps.
    if (topApplication == nil) topApplication = MSHookIvar<SBApplication *>([objc_getClass("SBUIController") sharedInstance], "_pendingAppActivatedByGesture");

    return topApplication != nil
        && [self currentOrientationIsSupported]
        && ![SBApp _accessibilityIsSystemGestureActive]
        && ![[objc_getClass("SBUIController") sharedInstance] isSwitcherShowing]
        && ![[objc_getClass("SBBulletinWindowController") sharedInstance] isBusy]
        && !ZephyrAssistantIsVisible()
        && ![[objc_getClass("SBBulletinListController") sharedInstanceIfExists] listViewIsActive]
        && [(NSNumber *) ZephyrPreferencesGet(@"SwipeSideEnabled", [NSNumber numberWithBool:YES]) boolValue];
}

- (BOOL)shouldUseGrabberAtEdge:(SBOffscreenEdge)edge {
    return [(NSNumber *) ZephyrPreferencesGet(@"SideGrabberEnabled", [NSNumber numberWithBool:NO]) boolValue];
}

- (BOOL)currentOrientationIsSupported {
    return YES;
}

- (BOOL)handle:(SBOffscreenSwipeGestureRecognizer *)recognizer {
    SBUIController *controller = [objc_getClass("SBUIController") sharedInstance];
    [controller handleFluidHorizontalSystemGesture:recognizer];
    return YES;
}

@end

%group SwitchApp

%hook SBUIController

static ZephyrSwitchAppGesture *gesture = nil;

- (void)finishLaunching {
    %orig;

    NSInteger touches = [(NSNumber *) ZephyrPreferencesGet(@"SideMinimumTouchCount", ZephyrPreferencesGet(@"MinimumTouchCount", [NSNumber numberWithInt:1])) intValue];
    CGFloat edgeMargin = [(NSNumber *) ZephyrPreferencesGet(@"SideSensitivityDistance", [NSNumber numberWithFloat:30.0f]) floatValue];

    gesture = [[ZephyrSwitchAppGesture alloc] init];
    [gesture addOffscreenEdge:kSBOffscreenEdgeRight minimumTouchCount:touches edgeMargin:edgeMargin];
    [gesture addOffscreenEdge:kSBOffscreenEdgeLeft minimumTouchCount:touches edgeMargin:edgeMargin];

    ZephyrPreferencesApplyActionRegister(^{
        NSInteger touches = [(NSNumber *) ZephyrPreferencesGet(@"SideMinimumTouchCount", ZephyrPreferencesGet(@"MinimumTouchCount", [NSNumber numberWithInt:1])) intValue];
        CGFloat edgeMargin = [(NSNumber *) ZephyrPreferencesGet(@"SideSensitivityDistance", [NSNumber numberWithFloat:30.0f]) floatValue];

        for (SBOffscreenSwipeGestureRecognizer *recognizer in [gesture gestureRecognizers]) {
            [recognizer setMinTouches:touches];
            [recognizer setEdgeMargin:edgeMargin];
        }
    });
}

static SBGestureRecognizer *activeHorizontalRecognizer = nil;

// avoid conflict between native gesture and custom gestures
- (void)handleFluidHorizontalSystemGesture:(SBGestureRecognizer *)recognizer {
    // This setting only controls the default gesture recognizer, not ours (offscreen swipe recognizers).
    if (![recognizer isKindOfClass:objc_getClass("SBOffscreenSwipeGestureRecognizer")]) {
        BOOL enabled = [ZephyrPreferencesGet(@"SystemSwitchAppEnabled", [NSNumber numberWithBool:YES]) boolValue];
        if (!enabled) return;
    }

    if (recognizer == activeHorizontalRecognizer) {
        if ([recognizer state] == SBGestureRecognizerStateEnded || [recognizer state] == SBGestureRecognizerStateCancelled) {
            activeHorizontalRecognizer = nil;
        }

        %orig;
    } else if (activeHorizontalRecognizer == nil && [recognizer state] == SBGestureRecognizerStateBegan) {
        activeHorizontalRecognizer = recognizer;
        %orig;
    }
}

%end

// The gesture, when starting, tries to rotate the screen (since they are only designed
// for the iPad). Since the iPhone's home screen can't rotate, disable that part here.

static NSInteger switchAppGestureBeganDisableRotation = 0;

%hook SpringBoard

- (void)noteInterfaceOrientationChanged:(UIInterfaceOrientation)orientation {
    if (switchAppGestureBeganDisableRotation) return;

    %orig;
}

%end

%hook UIDevice

- (void)setOrientation:(UIDeviceOrientation)orientation animated:(BOOL)animated {
    if (switchAppGestureBeganDisableRotation) return;

    %orig;
}

%end

%hook SBUIController

- (void)_switchAppGestureBegan {
    if ([[UIDevice currentDevice] userInterfaceIdiom] != UIUserInterfaceIdiomPad) switchAppGestureBeganDisableRotation += 1;
    %orig;
    if ([[UIDevice currentDevice] userInterfaceIdiom] != UIUserInterfaceIdiomPad) switchAppGestureBeganDisableRotation -= 1;
}

- (void)_switchAppGestureBegan:(CGFloat)location {
    if ([[UIDevice currentDevice] userInterfaceIdiom] != UIUserInterfaceIdiomPad) switchAppGestureBeganDisableRotation += 1;
    %orig;
    if ([[UIDevice currentDevice] userInterfaceIdiom] != UIUserInterfaceIdiomPad) switchAppGestureBeganDisableRotation -= 1;
}

%end

%hook SBSwitchAppGestureView

- (id)initWithInterfaceOrientation:(UIInterfaceOrientation)orientation startingApp:(SBApplication *)startingApp leftwardApp:(SBApplication *)leftApp rightwardApp:(SBApplication *)rightApp {
    if ((self = %orig) != nil) {
        // iOS 5.0 doesn't set this by default, so make sure to ourselves.
        [self setContentScaleFactor:[[UIScreen mainScreen] scale]];

        return self;
    }

    return self;
}

// Rotation support. By default, we can't rotate the SBSwitchAppGestureView, and
// since we no longer replace the _switchAppGestureBegan method, we can't add a
// different container view there. Instead, just hack that support in here instead.

- (void)willMoveToSuperview:(UIView *)newSuperview {
    if (newSuperview == nil) {
        UIView *superview = [self superview];
        [superview removeFromSuperview];
    }
}

- (void)didMoveToSuperview {
    UIView *superview = [self superview];
    UIView *contentView = MSHookIvar<UIView *>([objc_getClass("SBUIController") sharedInstance], "_contentView");

    if (superview == contentView) {
        UIView *containerView = [[UIView alloc] initWithFrame:[contentView bounds]];
        ZephyrRotateViewFromOrientationToOrientation(containerView, ZephyrHomeInterfaceOrientation(), ZephyrCurrentInterfaceOrientation(), YES);

        [containerView addSubview:self];
        [superview addSubview:containerView];
        [containerView release];
    }
}

%end

%end

%ctor {
    %init(SwitchApp);
}

