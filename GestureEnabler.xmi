
#import "Common.h"

// The purpose of this file is to re-enable the iPad system gestures on the iPhone,
// as well as the methods that implement them, so other parts of Zephyr can use that
// code. To do so, it needs to hook a C function that determines if gesture recognition
// is allowed. Unfortunately, there is no way to get a reference to that function.
// Instead, we hook the places that function is called, and then call it again in
// a context we control in order to force the gestures enabled, if just disabled.

static NSInteger disableNextCheck = 0;
static NSInteger fakeNextScrollingCheck = 0;

static void EnsureGesturesEnabled() {
    disableNextCheck += 1;

    // This function calls through to the gesture setup function. Since we can't get the address of that function,
    // we have to call through to it though something we do have access to. This is a rarely-used method that works.
    [[objc_getClass("SBLockdownManager") sharedInstance] _developerDeviceStateChanged];

    disableNextCheck -= 1;
}

// -[SBLockdownManager _developerDeviceStateChanged] calls CFPreferencesSynchronize, but in my testing, I've seen
// that crash badly. Since we don't have other options for what to call on iOS 5, just neuter the synchronize call.
static Boolean (*orig_CFPreferencesSynchronize)(CFStringRef, CFStringRef, CFStringRef);
static Boolean replaced_CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName) {
    if (disableNextCheck > 0) {
        return NO;
    }

    return orig_CFPreferencesSynchronize(applicationID, userName, hostName);
}

%group GestureEnabler

%hook UIDevice

// The gesture recognition for system gestures is only setup when the device
// is an iPad. When we are faking it (see above), pretend to be on an iPad.
- (UIUserInterfaceIdiom)userInterfaceIdiom {
    if (disableNextCheck > 0) {
        return UIUserInterfaceIdiomPad;
    }

    return %orig;
}

%end

%hook SBIconController

// On iOS 6 and later, the home screen being scrolling blocks system gestures.
// This apparently bugged people (quite a bit of support email), so force it back.
- (BOOL)isScrolling {
    if (fakeNextScrollingCheck > 0) {
        fakeNextScrollingCheck -= 1;

        return NO;
    }

    return %orig;
}

%end

%hook SBPlatformController

// The gesture setup will only be called if we have the capability.
- (BOOL)hasCapability:(NSString *)capability {
    if ([capability isEqual:kGSMultitaskingGesturesCapability])  {
        return YES;
    }

    return %orig;
}

%end

%end

// One of the common call sites for "the function" is SBSystemGesturesChangeGestureAndRecognitionState,
// another C function, called from too many C functions and methods for us to hook them all. However,
// there is one way to detect SBSystemGesturesChangeGestureAndRecognitionState: if logging is enabled,
// it will print out a log message that we can detect. Then, we can force the gestures enabled again.

static void (*orig_NSLogv)(NSString *, va_list);
static void replaced_NSLogv(NSString *what, va_list args) {
    if ([what hasPrefix:@"SBSystemGesturesChangeGestureAndRecognitionState"]) {
        // Only iOS 6 checks for home screen scrolling (see above). But rather
        // than hardcoding a set of versions to do this on, check dynamically:
        if ([what rangeOfString:@"home-screen scrolling"].location != NSNotFound) {
            fakeNextScrollingCheck++;
        }

        // This is called in the middle of the method, but we need to force it
        // re-enabled after a later portion. To do that, just async the call.
        dispatch_async(dispatch_get_main_queue(), ^{
            EnsureGesturesEnabled();
        });

        return;
    }

    orig_NSLogv(what, args);
}

static Boolean (*orig_CFPreferencesGetAppBooleanValue)(CFStringRef, CFStringRef, Boolean *);
static Boolean replaced_CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat) {
    if ([(NSString *)key isEqual:@"SBSystemGesturesLogging"]) {
        // The above logging message that we depend on to get notified when
        // SBSystemGesturesChangeGestureAndRecognitionState is called is only
        // logged when this preferences key is enabled. Let's hope it doesn't
        // go away, since there doesn't seem to be a clear need for it in SB.
        return YES;
    } else {
        return orig_CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
    }
}

static CFPropertyListRef (*orig_CFPreferencesCopyAppValue)(CFStringRef, CFStringRef);
static CFPropertyListRef replaced_CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID) {
    if ([(NSString *)key isEqual:@"SBUseSystemGestures"]) {
        // The iPad has this set by default, but the iPhone doesn't (and has no
        // way to set it in the UI), so we need to enable gestures manually here.
        // (But even on the iPad, we need it set for our gestures to work at all.)
        return [[NSNumber numberWithInt:1] copy];
    } else {
        return orig_CFPreferencesCopyAppValue(key, applicationID);
    }
}

// Besides SBSystemGesturesChangeGestureAndRecognitionState, there are a few other
// functions and methods that call the gesture setup function. We need to make sure
// to reset the enabled state after they are called. (We can't just pretend to be
// an iPad for the entirety of these methods, as that would cause lots of issues.)
// NOTE: When new iOS versions are released, be sure to check this list in IDA!

%group GestureEnablerFixes

%hook SBUIController

- (void)_reloadDemoAndDebuggingDefaultsAndCapabilities { // iOS 6
    %orig;
    EnsureGesturesEnabled();
}

- (void)noteInterfaceOrientationChanged:(UIInterfaceOrientation)orientation duration:(NSTimeInterval)duration updateMirroredDisplays:(BOOL)mirror force:(BOOL)force {
    %orig;
    EnsureGesturesEnabled();
}

- (id)init {
    self = %orig;
    EnsureGesturesEnabled();
    return self;
}

%end

%hook SpringBoard

- (void)userDefaultsDidChange:(id)something { // iOS 5
    %orig;
    EnsureGesturesEnabled();
}

- (void)applicationDidFinishLaunching:(SpringBoard *)app {
    %orig;
    EnsureGesturesEnabled();
}

%end

%end

%ctor {
    %init(GestureEnabler);
    %init(GestureEnablerFixes);

    MSHookFunction(CFPreferencesGetAppBooleanValue, replaced_CFPreferencesGetAppBooleanValue, &orig_CFPreferencesGetAppBooleanValue);
    MSHookFunction(CFPreferencesCopyAppValue, replaced_CFPreferencesCopyAppValue, &orig_CFPreferencesCopyAppValue);
    MSHookFunction(CFPreferencesSynchronize, replaced_CFPreferencesSynchronize, &orig_CFPreferencesSynchronize);
    MSHookFunction((void *)NSLogv, (void *)replaced_NSLogv, (void **)&orig_NSLogv);
}

