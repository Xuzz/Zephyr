/*
 * Copyright (c) 2011-2013, Xuzz Productions, LLC
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#import "OffscreenGesture.h"

static NSMutableArray *allGestureRecognizers = nil;

%ctor {
    allGestureRecognizers = [[NSMutableArray alloc] init];
}

void SBGestureRecognizerRegister(SBGestureRecognizer *recognizer) {
    [allGestureRecognizers addObject:recognizer];
}

void SBGestureRecognizerUnregister(SBGestureRecognizer *recognizer) {
    [allGestureRecognizers removeObject:recognizer];
}


%group OffscreenSwipes

static void (*BKSHIDServicesSystemGestureIsPossible)(BOOL) = NULL;
static void (*BKSHIDServicesSystemGestureIsStealingEvents)(BOOL) = NULL;

%hook SBHandMotionExtractor

- (void)extractHandMotionForActiveTouches:(SBTouchInfo *)activeTouches count:(unsigned int)count centroid:(CGPoint)centroid {
    %orig;

    SBTouchInfo *touchBuffer = (SBTouchInfo *) malloc(sizeof(SBTouchInfo) * count);
    memcpy(touchBuffer, activeTouches, sizeof(SBTouchInfo) * count);

    dispatch_async(dispatch_get_main_queue(), ^{
        for (SBGestureRecognizer *gu in allGestureRecognizers) {
            SBGestureContext *gestureContext = (SBGestureContext *) malloc(sizeof(SBGestureContext));
            gestureContext->pixelDeltas = [self pixelDeltas];
            gestureContext->averageVelocities = [self averageVelocities];
            gestureContext->averageTranslation = [self averageTranslation];
            gestureContext->movementVelocityInPointsPerSecond = [self movementVelocityInPointsPerSecond];
            gestureContext->farthestFingerSeparation = [self farthestFingerSeparation];
            gestureContext->activeTouchCount = count;
            memcpy(gestureContext->activeTouches, touchBuffer, sizeof(SBTouchInfo) * count);

            gestureContext->unk1 = 0;
            gestureContext->unk2 = 0;
            gestureContext->unk3 = 0;
            gestureContext->unk4 = 0;

            SBGestureRecognizerState state = [gu state];

            BOOL shouldReceiveTouches = [gu shouldReceiveTouches];
            BOOL hasTouches = (count > 0);

            if (state == SBGestureRecognizerStatePossible) {
                // Only start with enough touches for multi-touch gestures.
                BOOL numberOfTouchesIsValid = hasTouches;

                if ([gu isKindOfClass:objc_getClass("SBFluidSlideGestureRecognizer")]) {
                    SBFluidSlideGestureRecognizer *swipeRecognizer = (SBFluidSlideGestureRecognizer *) gu;
                    numberOfTouchesIsValid = (count >= (unsigned int) [swipeRecognizer minTouches]);
                }

                if (shouldReceiveTouches) {
                    if (numberOfTouchesIsValid) {
                        // If state is "ready" and there are enough touches, start.
                        [gu touchesBegan:gestureContext];
                    } else {
                        // Otherwise, reset: could still start if finger added.
                        [gu reset];
                    }
                } else {
                    // Don't begin if doesn't want touches.
                }
            } else if (state == SBGestureRecognizerStateBegan || state == SBGestureRecognizerStateChanged) {
                // Allow removing a finger after starting: don't check minTouches for moved.

                if (shouldReceiveTouches) {
                    if (hasTouches) {
                        // Continue if still valid.
                        [gu touchesMoved:gestureContext];
                    } else {
                        // End if no longer enough touches.
                        [gu touchesEnded:gestureContext];
                        [gu reset];
                    }
                } else {
                    // Kill if no longer interested in touches.
                    [gu reset];
                }
            } else if (state == SBGestureRecognizerStateEnded || state == SBGestureRecognizerStateCancelled) {
                if (hasTouches) {
                    // Do nothing to preserve ended/cancelled state to the end of the gesture.
                } else {
                    // When the gesture ends, reset.
                    [gu reset];
                }
            } else {
                // Unknown state.
                NSLog(@"[Zephyr] Unknown SBGestureRecognizerState %d.", state);
            }

            free(gestureContext);
        }

        free(touchBuffer);
    });
}

%end

%hook SBGestureRecognizer

- (void)setState:(SBGestureRecognizerState)state {
    if (![allGestureRecognizers containsObject:self]) {
        %orig;
        return;
    }

    // iOS 6. On iOS 6, we need to tell BackBoard when a gesture is taking over touch events,
    // or it will believe the touch never ends while the gesture is running (causing all sorts
    // of issues). This may really belong above, but for simplicity, it's inserted here.

    // Transitioning to Began: mark us as stealing touches.
    if (state == SBGestureRecognizerStateBegan) {
        if (BKSHIDServicesSystemGestureIsStealingEvents != NULL) {
            BKSHIDServicesSystemGestureIsStealingEvents(YES);
        }
    }

    %orig;

    // Transitioning to Ended/Cancelled: mark us as not stealing touches any more.
    if (state == SBGestureRecognizerStateEnded || state == SBGestureRecognizerStateCancelled) {
        if (BKSHIDServicesSystemGestureIsStealingEvents != NULL) {
            BKSHIDServicesSystemGestureIsStealingEvents(NO);
        }
    }
}

%end

%end

%ctor {
    %init(OffscreenSwipes);

    void *handle = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", RTLD_LAZY);
    BKSHIDServicesSystemGestureIsPossible = (void (*)(BOOL)) dlsym(handle, "BKSHIDServicesSystemGestureIsPossible");
    BKSHIDServicesSystemGestureIsStealingEvents = (void (*)(BOOL)) dlsym(handle, "BKSHIDServicesSystemGestureIsStealingEvents");
}

