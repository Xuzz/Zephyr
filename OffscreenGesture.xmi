
#import "OffscreenGesture.h"

static NSMutableArray *allGestureRecognizers = nil;

%ctor {
    // XXX: memory leak?
    allGestureRecognizers = [[NSMutableArray alloc] init];
}

void SBGestureRecognizerRegister(SBGestureRecognizer *recognizer) {
    [allGestureRecognizers addObject:recognizer];
}

void SBGestureRecognizerUnregister(SBGestureRecognizer *recognizer) {
    [allGestureRecognizers removeObject:recognizer];
}

%group OffscreenSwipes

%hook SBHandMotionExtractor

- (void)extractHandMotionForActiveTouches:(SBTouchInfo *)activeTouches count:(unsigned int)count centroid:(CGPoint)centroid {
    %orig;

    SBTouchInfo *touchBuffer = (SBTouchInfo *) malloc(sizeof(SBTouchInfo) * count);
    memcpy(touchBuffer, activeTouches, sizeof(SBTouchInfo) * count);

    dispatch_async(dispatch_get_main_queue(), ^{
        for (SBGestureRecognizer *gu in allGestureRecognizers) {
            SBGestureContext *gestureContext = (SBGestureContext *) malloc(sizeof(SBGestureContext));
            gestureContext->pixelDeltas = [self pixelDeltas];
            gestureContext->averageVelocities = [self averageVelocities];
            gestureContext->averageTranslation = [self averageTranslation];
            gestureContext->movementVelocityInPointsPerSecond = [self movementVelocityInPointsPerSecond];
            gestureContext->farthestFingerSeparation = [self farthestFingerSeparation];
            gestureContext->activeTouchCount = count;
            memcpy(gestureContext->activeTouches, touchBuffer, sizeof(SBTouchInfo) * count);

            gestureContext->unk1 = 0;
            gestureContext->unk2 = 0;
            gestureContext->unk3 = 0;
            gestureContext->unk4 = 0;

            SBGestureRecognizerState state = [gu state];

            BOOL shouldReceiveTouches = [gu shouldReceiveTouches];
            BOOL hasTouches = (count > 0);

            if (state == SBGestureRecognizerStatePossible) {
                // Only start with enough touches for multi-touch gestures.
                BOOL numberOfTouchesIsValid = hasTouches;

                if ([gu isKindOfClass:objc_getClass("SBFluidSlideGestureRecognizer")]) {
                    SBFluidSlideGestureRecognizer *swipeRecognizer = (SBFluidSlideGestureRecognizer *) gu;
                    numberOfTouchesIsValid = (count >= (unsigned int) [swipeRecognizer minTouches]);
                }

                if (shouldReceiveTouches) {
                    if (numberOfTouchesIsValid) {
                        // If state is "ready" and there are enough touches, start.
                        [gu touchesBegan:gestureContext];
                    } else {
                        // Otherwise, reset: could still start if finger added.
                        [gu reset];
                    }
                } else {
                    // Don't begin if doesn't want touches.
                }
            } else if (state == SBGestureRecognizerStateBegan || state == SBGestureRecognizerStateChanged) {
                // Allow removing a finger after starting: don't check minTouches for moved.

                if (shouldReceiveTouches) {
                    if (hasTouches) {
                        // Continue if still valid.
                        [gu touchesMoved:gestureContext];
                    } else {
                        // End if no longer enough touches.
                        [gu touchesEnded:gestureContext];
                        [gu reset];
                    }
                } else {
                    // Kill if no longer interested in touches.
                    [gu reset];
                }
            } else if (state == SBGestureRecognizerStateEnded || state == SBGestureRecognizerStateCancelled) {
                if (hasTouches) {
                    // Do nothing to preserve ended/cancelled state to the end of the gesture.
                } else {
                    // When the gesture ends, reset.
                    [gu reset];
                }
            } else {
                // Unknown state.
                NSLog(@"[Zephyr] Unknown SBGestureRecognizerState %d.", state);
            }

            free(gestureContext);
        }

        free(touchBuffer);
    });
}

%end

%end

%ctor {
    %init(OffscreenSwipes);
}

