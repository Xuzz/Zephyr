
#import "OffscreenGesture.h"

static NSMutableArray *allGestureRecognizers = nil;

%ctor {
    // XXX: memory leak?
    allGestureRecognizers = [[NSMutableArray alloc] init];
}

void SBGestureRecognizerRegister(SBGestureRecognizer *recognizer) {
    [allGestureRecognizers addObject:recognizer];
}

void SBGestureRecognizerUnregister(SBGestureRecognizer *recognizer) {
    [allGestureRecognizers removeObject:recognizer];
}

%group OffscreenSwipes

%hook SBHandMotionExtractor

- (void)extractHandMotionForActiveTouches:(SBTouchInfo *)activeTouches count:(unsigned int)count centroid:(CGPoint)centroid {
    %orig;

    SBTouchInfo *touchBuffer = (SBTouchInfo *) malloc(sizeof(SBTouchInfo) * count);
    memcpy(touchBuffer, activeTouches, sizeof(SBTouchInfo) * count);

    dispatch_async(dispatch_get_main_queue(), ^{
        for (SBGestureRecognizer *gu in allGestureRecognizers) {
            SBGestureContextRef gestureContext = (SBGestureContextRef) malloc(sizeof(__SBGestureContext));
            gestureContext->pixelDeltas = [self pixelDeltas];
            gestureContext->averageVelocities = [self averageVelocities];
            gestureContext->averageTranslation = [self averageTranslation];
            gestureContext->movementVelocityInPointsPerSecond = [self movementVelocityInPointsPerSecond];
            gestureContext->farthestFingerSeparation = [self farthestFingerSeparation];
            gestureContext->activeTouchCount = count;
            memcpy(gestureContext->activeTouches, touchBuffer, sizeof(SBTouchInfo) * count);

            gestureContext->unk1 = 0;
            gestureContext->unk2 = 0;
            gestureContext->unk3 = 0;
            gestureContext->unk4 = 0;

            int state = [gu state];

            if ([gu shouldReceiveTouches] && state <= 2) {
                if (count > 0) {
                    if (state == 0) {
                        BOOL numberOfTouchesIsValid = YES;
                        if ([gu isKindOfClass:objc_getClass("SBFluidSlideGestureRecognizer")]) {
                            SBFluidSlideGestureRecognizer *swipeRecognizer = (SBFluidSlideGestureRecognizer *) gu;
                            numberOfTouchesIsValid = (count >= (unsigned int) [swipeRecognizer minTouches]);
                        }

                        if (numberOfTouchesIsValid) {
                            // If state is "ready" and there are enough touches, start.
                            [gu touchesBegan:gestureContext];
                        } else {
                            [gu reset];
                        }
                    } else {
                        // If we've already started, then continue.
                        [gu touchesMoved:gestureContext];
                    }
                } else {
                    if (state == 2 || state == 1) {
                        // If we are active but no more touches, end.
                        [gu touchesEnded:gestureContext];
                        [gu reset];
                    } else {
                        // Not sure how this would happen, bail out.
                        [gu reset];
                    }
                }
            } else {
                // If it decides it doesn't want touches anymore, or is
                // in the cancelled/ended state, reset it.
                // XXX: this may be slow, it runs potentially multiple times per touch
                [gu reset];
            }

            free(gestureContext);
        }

        free(touchBuffer);
    });
}

%end

%hook SBOffscreenSwipeGestureRecognizer

// XXX: Hack to workaround Apple bug.
// Basically, this method is fail iff m_offscreenEdge is kSBOffscreenEdgeLeft,
// so work around that by flipping the touch and testing it as on the right.
- (BOOL)firstTouchInRange:(CGPoint)touch {
    if (MSHookIvar<SBOffscreenEdge>(self, "m_offscreenEdge") == kSBOffscreenEdgeLeft) {
        touch.x = [[UIScreen mainScreen] bounds].size.width - touch.x;

        MSHookIvar<SBOffscreenEdge>(self, "m_offscreenEdge") = kSBOffscreenEdgeRight;
        int orig = %orig;
        MSHookIvar<SBOffscreenEdge>(self, "m_offscreenEdge") = kSBOffscreenEdgeLeft;

        return orig;
    } else {
        return %orig;
    }
}

%end

%end

%ctor {
    %init(OffscreenSwipes);
}

