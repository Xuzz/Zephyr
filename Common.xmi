
#import "Common.h"
#import "LayerSnapshotter.h"

NSString *ZephyrDescriptionForOrientation(UIInterfaceOrientation orientation) {
    switch (orientation) {
        case UIInterfaceOrientationPortrait:
            return @"portrait";
            break;
        case UIInterfaceOrientationPortraitUpsideDown:
            return @"portrait upside-down";
            break;
        case UIInterfaceOrientationLandscapeLeft:
            return @"landscape left";
            break;
        case UIInterfaceOrientationLandscapeRight:
            return @"landscape right";
            break;
    }

    return @"invalid orientation";
}

UIInterfaceOrientation ZephyrOrientationFlip(UIInterfaceOrientation orientation) {
    switch (orientation) {
        case UIInterfaceOrientationPortrait:
            return UIInterfaceOrientationPortraitUpsideDown;
        case UIInterfaceOrientationPortraitUpsideDown:
            return UIInterfaceOrientationPortrait;
        case UIInterfaceOrientationLandscapeLeft:
            return UIInterfaceOrientationLandscapeRight;
        case UIInterfaceOrientationLandscapeRight:
            return UIInterfaceOrientationLandscapeLeft;
    }

    return orientation;
}

void ZephyrRotateViewFromOrientationToOrientation(UIView *view, UIInterfaceOrientation fromOrientation, UIInterfaceOrientation toOrientation, BOOL inPlace) {
    CGAffineTransform transform = [view transform];
    CGRect frame = [view frame];

    // NSLog(@"rotating %@ from %@ to %@", view, ZephyrDescriptionForOrientation(fromOrientation), ZephyrDescriptionForOrientation(toOrientation));

    CGFloat rotation = 0.0f;
    BOOL perpendicular = NO;
    BOOL clockwise = NO;

    switch (fromOrientation) {
        case UIInterfaceOrientationPortrait:
            switch (toOrientation) {
                case UIInterfaceOrientationPortrait:
                    rotation = 0.0f;
                    break;
                case UIInterfaceOrientationPortraitUpsideDown:
                    rotation = M_PI;
                    break;
                case UIInterfaceOrientationLandscapeLeft:
                    rotation = -(M_PI / 2.0f);
                    clockwise = YES;
                    perpendicular = YES;
                    break;
                case UIInterfaceOrientationLandscapeRight:
                    rotation = (M_PI / 2.0f);
                    perpendicular = YES;
                    break;
            }
            break;
        case UIInterfaceOrientationPortraitUpsideDown:
            switch (toOrientation) {
                case UIInterfaceOrientationPortrait:
                    rotation = M_PI;
                    break;
                case UIInterfaceOrientationPortraitUpsideDown:
                    rotation = 0.0f;
                    break;
                case UIInterfaceOrientationLandscapeLeft:
                    rotation = (M_PI / 2.0f);
                    perpendicular = YES;
                    break;
                case UIInterfaceOrientationLandscapeRight:
                    rotation = -(M_PI / 2.0f);
                    clockwise = YES;
                    perpendicular = YES;
                    break;
            }
            break;
        case UIInterfaceOrientationLandscapeLeft:
            switch (toOrientation) {
                case UIInterfaceOrientationPortrait:
                    rotation = (M_PI / 2.0f);
                    perpendicular = YES;
                    break;
                case UIInterfaceOrientationPortraitUpsideDown:
                    rotation = -(M_PI / 2.0f);
                    clockwise = YES;
                    perpendicular = YES;
                    break;
                case UIInterfaceOrientationLandscapeLeft:
                    rotation = 0.0f;
                    break;
                case UIInterfaceOrientationLandscapeRight:
                    rotation = M_PI;
                    break;
            }
            break;
        case UIInterfaceOrientationLandscapeRight:
            switch (toOrientation) {
                case UIInterfaceOrientationPortrait:
                    rotation = -(M_PI / 2.0f);
                    clockwise = YES;
                    perpendicular = YES;
                    break;
                case UIInterfaceOrientationPortraitUpsideDown:
                    rotation = (M_PI / 2.0f);
                    perpendicular = YES;
                    break;
                case UIInterfaceOrientationLandscapeLeft:
                    rotation = M_PI;
                    break;
                case UIInterfaceOrientationLandscapeRight:
                    rotation = 0.0f;
                    break;
            }
            break;
    }

    transform = CGAffineTransformRotate(transform, rotation);

    if (perpendicular) {
        if (inPlace) {
            CGRect frame = [view frame];
            frame.size.width = [view frame].size.height;
            frame.size.height = [view frame].size.width;
            [view setFrame:frame];
        }

        if (clockwise) {
            transform = CGAffineTransformTranslate(transform, (frame.size.width - frame.size.height) / 2.0f, (frame.size.height - frame.size.width) / -2.0f);
        } else {
            transform = CGAffineTransformTranslate(transform, (frame.size.width - frame.size.height) / -2.0f, (frame.size.height - frame.size.width) / 2.0f);
        }
    }

    /*UIView *redView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, [view bounds].size.width / 2.0, [view bounds].size.height / 2.0)];
    [redView setAutoresizingMask:UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleBottomMargin];
    [redView setBackgroundColor:[UIColor redColor]];
    [view addSubview:redView];

    UIView *blueView = [[UIView alloc] initWithFrame:CGRectMake([view bounds].size.width - ([view bounds].size.width / 2.0), [view bounds].size.height - ([view bounds].size.height / 2.0), [view bounds].size.width / 2.0, [view bounds].size.height / 2.0)];
    [blueView setAutoresizingMask:UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin];
    [blueView setBackgroundColor:[UIColor blueColor]];
    [view addSubview:blueView];*/

    [view setTransform:transform];
}

static BOOL disableGestureViewMask = NO;

UIView *ZephyrViewForApplication(SBApplication *app) {
    disableGestureViewMask = YES;
    UIView *gestureView = [[objc_getClass("SBGestureViewVendor") sharedInstance] viewForApp:app gestureType:kSBGestureTypeSwitchApp includeStatusBar:YES];
    disableGestureViewMask = NO;
    return gestureView;
}

UIView *ZephyrViewWithScreenshotOfView(UIView *view) {
    dlopen("/usr/lib/liblayersnapshotter.dylib", RTLD_LAZY);

    if ([view respondsToSelector:@selector(renderSnapshot)]) {
        UIImage *viewImage = [view renderSnapshot];
        UIImageView *screenshotView = [[UIImageView alloc] initWithImage:viewImage];
        [screenshotView setFrame:[view frame]];
        return [screenshotView autorelease];
    } else {
        return [[[UIView alloc] initWithFrame:view.frame] autorelease];
    }
}

CGFloat ZephyrHeightForOrientation(UIInterfaceOrientation orientation) {
    if (UIInterfaceOrientationIsLandscape(orientation)) {
        return [[UIScreen mainScreen] bounds].size.width;
    } else {
        return [[UIScreen mainScreen] bounds].size.height;
    }
}

CGFloat ZephyrHeightFromScreenPercentage(CGFloat percentage, UIInterfaceOrientation orientation) {
    return ZephyrHeightForOrientation(orientation) * percentage;
}

UIInterfaceOrientation ZephyrCurrentInterfaceOrientation() {
    return [SBApp _frontMostAppOrientation];
}

UIInterfaceOrientation ZephyrDeviceInterfaceOrientation() {
    return [SBApp interfaceOrientationForCurrentDeviceOrientation];
}

UIInterfaceOrientation ZephyrHomeInterfaceOrientation() {
    return [[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad ? ZephyrCurrentInterfaceOrientation() : UIInterfaceOrientationPortrait;
}


